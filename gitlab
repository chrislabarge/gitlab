#!/bin/bash
#have build command use the array tenique to dynamically run the command
#have allow for the commands to come in any order.
#have it so if the flag commands likes --title= are not present, each ATTR command will be the API's order of attributes.
# add tab completion

TOKEN=$GL_TOKEN
RESOURCE=$1
ACTION=$2
ATTR_1=$3
ATTR_2=$4
ATTR_3=$5
PROJECT_ID=$GL_PROJECT_ID
BASE_URL='https://gitlab.com/api/v4'

build_url() {
  echo "${BASE_URL}/projects/${PROJECT_ID}/${RESOURCE}"
}

comment_json() {
cat <<- _EOF_
  {
    "body": "This_is_something even newer",
    "position": {
      "base_sha": "2860a6164b284f62a0f255268b1bdb8b65ea15f6",
      "start_sha": "2860a6164b284f62a0f255268b1bdb8b65ea15f6",
      "head_sha": "705c770674381eb28a05e36bad61760bb7c5464e",
      "old_path": "app/assets/stylesheets/main.scss",
      "new_path": "app/assets/stylesheets/main.scss",
      "position_type": "text",
      "new_line": "12"
    }
  }
_EOF_

}



if ["$RESOURCE" == "issues"]; then

  if ["$ATTR_1" == ""]; then
    echo -n 'Please provide a Title: '
    read ATTR_1
  fi

  if ["$ATTR_2" == ""]; then
    echo -n 'Please provide a Description: '
    read ATTR_2
  fi

  if ["$ATTR_3" == ""]; then
    read -e -p 'Please provide Labels - (Feature,Bug,Soon,Later,Idea,Test Me): ' -i 'Bug'
    ATTR_3=$REPLY
  fi
fi

build_command() {
  if [ "$ACTION" == 'list' ]; then
    action='GET'
  elif [ "$ACTION" == 'ls' ]; then
    action='GET'
  elif [ "$ACTION" == 'create' ]; then
    action='POST'
  elif [ "$ACTION" == '-c' ]; then
    action='POST'
  elif [ "$ACTION" == 'new' ]; then
    action='POST'
  fi

  url=$(build_url)


  #if ["$RESOURCE" == 'issues']; then
  #  echo "$(curl -d "private_token=${TOKEN}&title=${ATTR_1}&description=${ATTR_2}&labels=${ATTR_3}" -X $action $url)"
  #else
    payload="$(comment_json)"
    echo $payload
    echo "$(curl 0 -v -H "Content-Type: application/json" -H "Private-Token: ${TOKEN}" -X $action "${url}/112/discussions/" -d "${payload}")"
    #echo $payload | curl -v -H "PRIVATE-TOKEN: ${TOKEN}" -H "Content-Type: application/json" -X $action "${url}/112/discussions/" \
    #  -d @-
  #jfi
}


cat <<- _EOF_

Executed command
with resource: $1
with action: $2
with title: $3
with description: $4

_EOF_

output="$(build_command)"

echo $output #| python -m json.tool

if echo $output | grep -iqF error; then
  echo 'Response returned an error.' >&2
  exit 1
else
  exit 0
fi

